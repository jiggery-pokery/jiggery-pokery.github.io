@mixin size($width, $height: $width) {
  width: $width;
  height: $height;
}

@mixin pos($top: auto, $right: auto, $bottom: auto, $left: auto) {
  @if ($top != auto) {
    top: $top;  
  }

  @if ($right != auto) {
    right: $right;  
  }

  @if ($bottom != auto) {
    bottom: $bottom;  
  }

  @if ($left != auto) {
    left: $left;  
  }
}

@mixin pos-tl($top: 0, $left: 0) {
  top: $top;
  left: $left;
}

@mixin pos-br($bottom: 0, $right: 0) {
  bottom: $bottom;
  right: $right;
}

@mixin pos-default {
  top: 0;
  left: 0;
}

@mixin no-border {
  border: none;
}

@mixin clearfix() {
  &::after {
    display: block;
    clear: both;
    content: "";
  }
}

///////////////////////////////////////////////
//
// Media Queries
// https://glennmccomb.com/articles/useful-sass-scss-media-query-mixins-for-bootstrap/
//
//
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-above(sm) {}
@mixin respond-above($breakpoint, $addMedia: false) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @if $addMedia == false {
      // Write the media query.
      @media (min-width: $breakpoint-value) {
        @content;
      }
    } @else {
      // Write the media query.
      @media (min-width: $breakpoint-value), #{$addMedia} {
        @content;
      }
    }
  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-below(sm) {}
@mixin respond-below($breakpoint, $addMedia: false, $isOr: true) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    @if $addMedia == false {
      // Write the media query.
      @media (max-width: ($breakpoint-value - 1)) {
        @content;
      }
    } @else {
      // Write the media query.
      @if $isOr == true {
        @media (max-width: ($breakpoint-value - 1)), #{$addMedia} {
          @content;
        }
      } @else {
        @media #{$addMedia} and (max-width: ($breakpoint-value - 1)) {
          @content;
        }
      }
      
    }


  
  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  
  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}